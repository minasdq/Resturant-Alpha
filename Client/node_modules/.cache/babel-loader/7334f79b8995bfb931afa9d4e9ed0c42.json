{"ast":null,"code":"import { isCancelable } from './retryer';\nexport function infiniteQueryBehavior() {\n  return {\n    onFetch: function onFetch(context) {\n      context.fetchFn = function () {\n        var _context$fetchOptions, _context$fetchOptions2, _context$state$data, _context$state$data2;\n\n        var fetchMore = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.fetchMore;\n        var pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;\n        var isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'forward';\n        var isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'backward';\n        var oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];\n        var oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];\n        var newPageParams = oldPageParams;\n        var cancelled = false; // Get query function\n\n        var queryFn = context.options.queryFn || function () {\n          return Promise.reject('Missing queryFn');\n        }; // Create function to fetch a page\n\n\n        var fetchPage = function fetchPage(pages, manual, param, previous) {\n          if (cancelled) {\n            return Promise.reject('Cancelled');\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages);\n          }\n\n          var queryFnContext = {\n            queryKey: context.queryKey,\n            pageParam: param\n          };\n          var queryFnResult = queryFn(queryFnContext);\n          var promise = Promise.resolve(queryFnResult).then(function (page) {\n            newPageParams = previous ? [param].concat(newPageParams) : [].concat(newPageParams, [param]);\n            return previous ? [page].concat(pages) : [].concat(pages, [page]);\n          });\n\n          if (isCancelable(queryFnResult)) {\n            var promiseAsAny = promise;\n            promiseAsAny.cancel = queryFnResult.cancel;\n          }\n\n          return promise;\n        };\n\n        var promise; // Fetch first page?\n\n        if (!oldPages.length) {\n          promise = fetchPage([]);\n        } // Fetch next page?\n        else if (isFetchingNextPage) {\n            var manual = typeof pageParam !== 'undefined';\n            var param = manual ? pageParam : getNextPageParam(context.options, oldPages);\n            promise = fetchPage(oldPages, manual, param);\n          } // Fetch previous page?\n          else if (isFetchingPreviousPage) {\n              var _manual = typeof pageParam !== 'undefined';\n\n              var _param = _manual ? pageParam : getPreviousPageParam(context.options, oldPages);\n\n              promise = fetchPage(oldPages, _manual, _param, true);\n            } // Refetch pages\n            else {\n                (function () {\n                  newPageParams = [];\n                  var manual = typeof context.options.getNextPageParam === 'undefined'; // Fetch first page\n\n                  promise = fetchPage([], manual, oldPageParams[0]); // Fetch remaining pages\n\n                  var _loop = function _loop(i) {\n                    promise = promise.then(function (pages) {\n                      var param = manual ? oldPageParams[i] : getNextPageParam(context.options, pages);\n                      return fetchPage(pages, manual, param);\n                    });\n                  };\n\n                  for (var i = 1; i < oldPages.length; i++) {\n                    _loop(i);\n                  }\n                })();\n              }\n\n        var finalPromise = promise.then(function (pages) {\n          return {\n            pages: pages,\n            pageParams: newPageParams\n          };\n        });\n        var finalPromiseAsAny = finalPromise;\n\n        finalPromiseAsAny.cancel = function () {\n          cancelled = true;\n\n          if (isCancelable(promise)) {\n            promise.cancel();\n          }\n        };\n\n        return finalPromise;\n      };\n    }\n  };\n}\nexport function getNextPageParam(options, pages) {\n  return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);\n}\nexport function getPreviousPageParam(options, pages) {\n  return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);\n}\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\n\nexport function hasNextPage(options, pages) {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    var nextPageParam = getNextPageParam(options, pages);\n    return typeof nextPageParam !== 'undefined' && nextPageParam !== null && nextPageParam !== false;\n  }\n}\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\n\nexport function hasPreviousPage(options, pages) {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    var previousPageParam = getPreviousPageParam(options, pages);\n    return typeof previousPageParam !== 'undefined' && previousPageParam !== null && previousPageParam !== false;\n  }\n}","map":{"version":3,"sources":["C:/Users/Dear User/Desktop/Resturant/resturantalpha/Client/node_modules/react-query/es/core/infiniteQueryBehavior.js"],"names":["isCancelable","infiniteQueryBehavior","onFetch","context","fetchFn","_context$fetchOptions","_context$fetchOptions2","_context$state$data","_context$state$data2","fetchMore","fetchOptions","meta","pageParam","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","state","data","pages","oldPageParams","pageParams","newPageParams","cancelled","queryFn","options","Promise","reject","fetchPage","manual","param","previous","length","resolve","queryFnContext","queryKey","queryFnResult","promise","then","page","concat","promiseAsAny","cancel","getNextPageParam","_manual","_param","getPreviousPageParam","_loop","i","finalPromise","finalPromiseAsAny","hasNextPage","Array","isArray","nextPageParam","hasPreviousPage","previousPageParam"],"mappings":"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","sourcesContent":["import { isCancelable } from './retryer';\nexport function infiniteQueryBehavior() {\n  return {\n    onFetch: function onFetch(context) {\n      context.fetchFn = function () {\n        var _context$fetchOptions, _context$fetchOptions2, _context$state$data, _context$state$data2;\n\n        var fetchMore = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.fetchMore;\n        var pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;\n        var isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'forward';\n        var isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'backward';\n        var oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];\n        var oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];\n        var newPageParams = oldPageParams;\n        var cancelled = false; // Get query function\n\n        var queryFn = context.options.queryFn || function () {\n          return Promise.reject('Missing queryFn');\n        }; // Create function to fetch a page\n\n\n        var fetchPage = function fetchPage(pages, manual, param, previous) {\n          if (cancelled) {\n            return Promise.reject('Cancelled');\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages);\n          }\n\n          var queryFnContext = {\n            queryKey: context.queryKey,\n            pageParam: param\n          };\n          var queryFnResult = queryFn(queryFnContext);\n          var promise = Promise.resolve(queryFnResult).then(function (page) {\n            newPageParams = previous ? [param].concat(newPageParams) : [].concat(newPageParams, [param]);\n            return previous ? [page].concat(pages) : [].concat(pages, [page]);\n          });\n\n          if (isCancelable(queryFnResult)) {\n            var promiseAsAny = promise;\n            promiseAsAny.cancel = queryFnResult.cancel;\n          }\n\n          return promise;\n        };\n\n        var promise; // Fetch first page?\n\n        if (!oldPages.length) {\n          promise = fetchPage([]);\n        } // Fetch next page?\n        else if (isFetchingNextPage) {\n            var manual = typeof pageParam !== 'undefined';\n            var param = manual ? pageParam : getNextPageParam(context.options, oldPages);\n            promise = fetchPage(oldPages, manual, param);\n          } // Fetch previous page?\n          else if (isFetchingPreviousPage) {\n              var _manual = typeof pageParam !== 'undefined';\n\n              var _param = _manual ? pageParam : getPreviousPageParam(context.options, oldPages);\n\n              promise = fetchPage(oldPages, _manual, _param, true);\n            } // Refetch pages\n            else {\n                (function () {\n                  newPageParams = [];\n                  var manual = typeof context.options.getNextPageParam === 'undefined'; // Fetch first page\n\n                  promise = fetchPage([], manual, oldPageParams[0]); // Fetch remaining pages\n\n                  var _loop = function _loop(i) {\n                    promise = promise.then(function (pages) {\n                      var param = manual ? oldPageParams[i] : getNextPageParam(context.options, pages);\n                      return fetchPage(pages, manual, param);\n                    });\n                  };\n\n                  for (var i = 1; i < oldPages.length; i++) {\n                    _loop(i);\n                  }\n                })();\n              }\n\n        var finalPromise = promise.then(function (pages) {\n          return {\n            pages: pages,\n            pageParams: newPageParams\n          };\n        });\n        var finalPromiseAsAny = finalPromise;\n\n        finalPromiseAsAny.cancel = function () {\n          cancelled = true;\n\n          if (isCancelable(promise)) {\n            promise.cancel();\n          }\n        };\n\n        return finalPromise;\n      };\n    }\n  };\n}\nexport function getNextPageParam(options, pages) {\n  return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);\n}\nexport function getPreviousPageParam(options, pages) {\n  return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);\n}\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\n\nexport function hasNextPage(options, pages) {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    var nextPageParam = getNextPageParam(options, pages);\n    return typeof nextPageParam !== 'undefined' && nextPageParam !== null && nextPageParam !== false;\n  }\n}\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\n\nexport function hasPreviousPage(options, pages) {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    var previousPageParam = getPreviousPageParam(options, pages);\n    return typeof previousPageParam !== 'undefined' && previousPageParam !== null && previousPageParam !== false;\n  }\n}"]},"metadata":{},"sourceType":"module"}