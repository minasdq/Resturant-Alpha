"use strict";

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.baseGenerator = baseGenerator;

var _project_types = require("../project_types");

var _helpers = require("../helpers");

var _configure = require("./configure");

var _jsPackageManager = require("../js-package-manager");

const defaultOptions = {
  extraPackages: [],
  extraAddons: [],
  staticDir: undefined,
  addScripts: true,
  addComponents: true,
  addBabel: true,
  addESLint: false,
  extraMain: undefined,
  extensions: undefined,
  commonJs: false
};

async function baseGenerator(packageManager, npmOptions, {
  language,
  builder
}, framework, options = defaultOptions) {
  const {
    extraAddons,
    extraPackages,
    staticDir,
    addScripts,
    addComponents,
    addBabel,
    addESLint,
    extraMain,
    extensions
  } = Object.assign({}, defaultOptions, options); // added to main.js
  // make sure to update `canUsePrebuiltManager` in dev-server.js and build-manager-config/main.js when this list changes

  const addons = ['@storybook/addon-links', '@storybook/addon-essentials']; // added to package.json

  const addonPackages = [...addons, '@storybook/addon-actions'];
  const yarn2Dependencies = packageManager.type === 'yarn2' ? ['@storybook/addon-docs', '@mdx-js/react'] : [];
  const builderDependencies = {
    [_project_types.Builder.Webpack5]: '@storybook/builder-webpack5'
  };
  const packageJson = packageManager.retrievePackageJson();
  const installedDependencies = new Set(Object.keys(packageJson.dependencies));
  const packages = [`@storybook/${framework}`, ...addonPackages, ...extraPackages, ...extraAddons, ...yarn2Dependencies, builderDependencies[builder]].filter(Boolean).filter(packageToInstall => !installedDependencies.has((0, _jsPackageManager.getPackageDetails)(packageToInstall)[0]));
  const versionedPackages = await packageManager.getVersionedPackages(...packages);
  const mainOptions = builder !== _project_types.Builder.Webpack4 ? Object.assign({
    core: {
      builder
    }
  }, extraMain) : extraMain;
  (0, _configure.configure)(framework, Object.assign({
    addons: [...addons, ...extraAddons],
    extensions,
    commonJs: options.commonJs
  }, mainOptions));

  if (addComponents) {
    (0, _helpers.copyComponents)(framework, language);
  }

  const babelDependencies = addBabel ? await (0, _helpers.getBabelDependencies)(packageManager, packageJson) : [];
  packageManager.addDependencies(Object.assign({}, npmOptions, {
    packageJson
  }), [...versionedPackages, ...babelDependencies]);

  if (addScripts) {
    packageManager.addStorybookCommandInScripts({
      port: 6006,
      staticFolder: staticDir
    });
  }

  if (addESLint) {
    packageManager.addESLintConfig();
  }
}