{"version":3,"file":"react-query-core.production.min.js","sources":["../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","../src/core/subscribable.ts","../node_modules/@babel/runtime/helpers/esm/extends.js","../src/core/utils.ts","../src/core/focusManager.ts","../src/core/onlineManager.ts","../src/core/retryer.ts","../src/core/notifyManager.ts","../src/core/logger.ts","../src/core/query.ts","../src/core/queryCache.ts","../src/core/mutation.ts","../src/core/mutationCache.ts","../src/core/infiniteQueryBehavior.ts","../src/core/queryClient.ts","../src/core/queryObserver.ts","../src/core/queriesObserver.ts","../src/core/infiniteQueryObserver.ts","../src/core/mutationObserver.ts"],"sourcesContent":["export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","type Listener = () => void\n\nexport class Subscribable<TListener extends Function = Listener> {\n  protected listeners: TListener[]\n\n  constructor() {\n    this.listeners = []\n  }\n\n  subscribe(listener?: TListener): () => void {\n    const callback = listener || (() => undefined)\n\n    this.listeners.push(callback as TListener)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners = this.listeners.filter(x => x !== callback)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.length > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import type { Mutation } from './mutation'\nimport type { Query } from './query'\nimport { EnsuredQueryKey } from './types'\nimport type {\n  MutationFunction,\n  MutationKey,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryOptions,\n} from './types'\n\n// TYPES\n\nexport interface QueryFilters {\n  /**\n   * Include or exclude active queries\n   */\n  active?: boolean\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include or exclude inactive queries\n   */\n  inactive?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: QueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include or exclude fetching queries\n   */\n  fetching?: boolean\n}\n\nexport interface MutationFilters {\n  /**\n   * Match mutation key exactly\n   */\n  exact?: boolean\n  /**\n   * Include mutations matching this predicate function\n   */\n  predicate?: (mutation: Mutation<any, any, any>) => boolean\n  /**\n   * Include mutations matching this mutation key\n   */\n  mutationKey?: MutationKey\n  /**\n   * Include or exclude fetching mutations\n   */\n  fetching?: boolean\n}\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined'\n\nexport function noop(): undefined {\n  return undefined\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: any): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function ensureQueryKeyArray<T extends QueryKey>(\n  value: T\n): EnsuredQueryKey<T> {\n  return (Array.isArray(value)\n    ? value\n    : ([value] as unknown)) as EnsuredQueryKey<T>\n}\n\nexport function difference<T>(array1: T[], array2: T[]): T[] {\n  return array1.filter(x => array2.indexOf(x) === -1)\n}\n\nexport function replaceAt<T>(array: T[], index: number, value: T): T[] {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function parseQueryArgs<\n  TOptions extends QueryOptions<any, any, any, TQueryKey>,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  arg1: TQueryKey | TOptions,\n  arg2?: QueryFunction<any, TQueryKey> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (!isQueryKey(arg1)) {\n    return arg1 as TOptions\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 } as TOptions\n  }\n\n  return { ...arg2, queryKey: arg1 } as TOptions\n}\n\nexport function parseMutationArgs<\n  TOptions extends MutationOptions<any, any, any, any>\n>(\n  arg1: MutationKey | MutationFunction<any, any> | TOptions,\n  arg2?: MutationFunction<any, any> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3, mutationKey: arg1, mutationFn: arg2 } as TOptions\n    }\n    return { ...arg2, mutationKey: arg1 } as TOptions\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2, mutationFn: arg1 } as TOptions\n  }\n\n  return { ...arg1 } as TOptions\n}\n\nexport function parseFilterArgs<\n  TFilters extends QueryFilters,\n  TOptions = unknown\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions\n): [TFilters, TOptions | undefined] {\n  return (isQueryKey(arg1)\n    ? [{ ...arg2, queryKey: arg1 }, arg3]\n    : [arg1 || {}, arg2]) as [TFilters, TOptions]\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>\n): boolean {\n  const {\n    active,\n    exact,\n    fetching,\n    inactive,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  let isActive\n\n  if (inactive === false || (active && !inactive)) {\n    isActive = true\n  } else if (active === false || (inactive && !active)) {\n    isActive = false\n  }\n\n  if (typeof isActive === 'boolean' && query.isActive() !== isActive) {\n    return false\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (typeof fetching === 'boolean' && query.isFetching() !== fetching) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>\n): boolean {\n  const { exact, fetching, predicate, mutationKey } = filters\n  if (isQueryKey(mutationKey)) {\n    if (!mutation.options.mutationKey) {\n      return false\n    }\n    if (exact) {\n      if (\n        hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)\n      ) {\n        return false\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false\n    }\n  }\n\n  if (\n    typeof fetching === 'boolean' &&\n    (mutation.state.status === 'loading') !== fetching\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hashQueryKeyByOptions<TQueryKey extends QueryKey = QueryKey>(\n  queryKey: TQueryKey,\n  options?: QueryOptions<any, any, any, TQueryKey>\n): string {\n  const hashFn = options?.queryKeyHashFn || hashQueryKey\n  return hashFn(queryKey)\n}\n\n/**\n * Default query keys hash function.\n */\nexport function hashQueryKey(queryKey: QueryKey): string {\n  const asArray = ensureQueryKeyArray(queryKey)\n  return stableValueHash(asArray)\n}\n\n/**\n * Hashes the value into a stable hash.\n */\nexport function stableValueHash(value: any): string {\n  return JSON.stringify(value, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean {\n  return partialDeepEqual(ensureQueryKeyArray(a), ensureQueryKeyArray(b))\n}\n\n/**\n * Checks if `b` partially matches with `a`.\n */\nexport function partialDeepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some(key => !partialDeepEqual(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = Array.isArray(a) && Array.isArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\nexport function shallowEqualObjects<T>(a: T, b: T): boolean {\n  if ((a && !b) || (b && !a)) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isQueryKey(value: any): value is QueryKey {\n  return typeof value === 'string' || Array.isArray(value)\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout)\n  })\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nexport function scheduleMicrotask(callback: () => void): void {\n  Promise.resolve()\n    .then(callback)\n    .catch(error =>\n      setTimeout(() => {\n        throw error\n      })\n    )\n}\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\nclass FocusManager extends Subscribable {\n  private focused?: boolean\n  private removeEventListener?: () => void\n\n  protected onSubscribe(): void {\n    if (!this.removeEventListener) {\n      this.setDefaultEventListener()\n    }\n  }\n\n  setEventListener(\n    setup: (setFocused: (focused?: boolean) => void) => () => void\n  ): void {\n    if (this.removeEventListener) {\n      this.removeEventListener()\n    }\n    this.removeEventListener = setup(focused => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    this.focused = focused\n\n    if (focused) {\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.focused === 'boolean') {\n      return this.focused\n    }\n\n    // document global can be unavailable in react native\n    if (typeof document === 'undefined') {\n      return true\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(\n      document.visibilityState\n    )\n  }\n\n  private setDefaultEventListener() {\n    if (!isServer && window?.addEventListener) {\n      this.setEventListener(onFocus => {\n        const listener = () => onFocus()\n        // Listen to visibillitychange and focus\n        window.addEventListener('visibilitychange', listener, false)\n        window.addEventListener('focus', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n          window.removeEventListener('focus', listener)\n        }\n      })\n    }\n  }\n}\n\nexport const focusManager = new FocusManager()\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\nclass OnlineManager extends Subscribable {\n  private online?: boolean\n  private removeEventListener?: () => void\n\n  protected onSubscribe(): void {\n    if (!this.removeEventListener) {\n      this.setDefaultEventListener()\n    }\n  }\n\n  setEventListener(\n    setup: (setOnline: (online?: boolean) => void) => () => void\n  ): void {\n    if (this.removeEventListener) {\n      this.removeEventListener()\n    }\n    this.removeEventListener = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    this.online = online\n\n    if (online) {\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    if (\n      typeof navigator === 'undefined' ||\n      typeof navigator.onLine === 'undefined'\n    ) {\n      return true\n    }\n\n    return navigator.onLine\n  }\n\n  private setDefaultEventListener() {\n    if (!isServer && window?.addEventListener) {\n      this.setEventListener(onOnline => {\n        const listener = () => onOnline()\n        // Listen to online\n        window.addEventListener('online', listener, false)\n        window.addEventListener('offline', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', listener)\n          window.removeEventListener('offline', listener)\n        }\n      })\n    }\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { sleep } from './utils'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = unknown> {\n  fn: () => TData | Promise<TData>\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\ninterface Cancelable {\n  cancel(): void\n}\n\nexport function isCancelable(value: any): value is Cancelable {\n  return typeof value?.cancel === 'function'\n}\n\nexport interface CancelOptions {\n  revert?: boolean\n  silent?: boolean\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\n// CLASS\n\nexport class Retryer<TData = unknown, TError = unknown> {\n  cancel: (options?: CancelOptions) => void\n  cancelRetry: () => void\n  continue: () => void\n  failureCount: number\n  isPaused: boolean\n  isResolved: boolean\n  isTransportCancelable: boolean\n  promise: Promise<TData>\n\n  constructor(config: RetryerConfig<TData, TError>) {\n    let cancelRetry = false\n    let cancelFn: ((options?: CancelOptions) => void) | undefined\n    let continueFn: ((value?: unknown) => void) | undefined\n    let promiseResolve: (data: TData) => void\n    let promiseReject: (error: TError) => void\n\n    this.cancel = cancelOptions => cancelFn?.(cancelOptions)\n    this.cancelRetry = () => {\n      cancelRetry = true\n    }\n    this.continue = () => continueFn?.()\n    this.failureCount = 0\n    this.isPaused = false\n    this.isResolved = false\n    this.isTransportCancelable = false\n    this.promise = new Promise<TData>((outerResolve, outerReject) => {\n      promiseResolve = outerResolve\n      promiseReject = outerReject\n    })\n\n    const resolve = (value: any) => {\n      if (!this.isResolved) {\n        this.isResolved = true\n        config.onSuccess?.(value)\n        continueFn?.()\n        promiseResolve(value)\n      }\n    }\n\n    const reject = (value: any) => {\n      if (!this.isResolved) {\n        this.isResolved = true\n        config.onError?.(value)\n        continueFn?.()\n        promiseReject(value)\n      }\n    }\n\n    const pause = () => {\n      return new Promise(continueResolve => {\n        continueFn = continueResolve\n        this.isPaused = true\n        config.onPause?.()\n      }).then(() => {\n        continueFn = undefined\n        this.isPaused = false\n        config.onContinue?.()\n      })\n    }\n\n    // Create loop function\n    const run = () => {\n      // Do nothing if already resolved\n      if (this.isResolved) {\n        return\n      }\n\n      let promiseOrValue: any\n\n      // Execute query\n      try {\n        promiseOrValue = config.fn()\n      } catch (error) {\n        promiseOrValue = Promise.reject(error)\n      }\n\n      // Create callback to cancel this fetch\n      cancelFn = cancelOptions => {\n        if (!this.isResolved) {\n          reject(new CancelledError(cancelOptions))\n\n          // Cancel transport if supported\n          if (isCancelable(promiseOrValue)) {\n            try {\n              promiseOrValue.cancel()\n            } catch {}\n          }\n        }\n      }\n\n      // Check if the transport layer support cancellation\n      this.isTransportCancelable = isCancelable(promiseOrValue)\n\n      Promise.resolve(promiseOrValue)\n        .then(resolve)\n        .catch(error => {\n          // Stop if the fetch is already resolved\n          if (this.isResolved) {\n            return\n          }\n\n          // Do we need to retry the request?\n          const retry = config.retry ?? 3\n          const retryDelay = config.retryDelay ?? defaultRetryDelay\n          const delay =\n            typeof retryDelay === 'function'\n              ? retryDelay(this.failureCount, error)\n              : retryDelay\n          const shouldRetry =\n            retry === true ||\n            (typeof retry === 'number' && this.failureCount < retry) ||\n            (typeof retry === 'function' && retry(this.failureCount, error))\n\n          if (cancelRetry || !shouldRetry) {\n            // We are done if the query does not need to be retried\n            reject(error)\n            return\n          }\n\n          this.failureCount++\n\n          // Notify on fail\n          config.onFail?.(this.failureCount, error)\n\n          // Delay\n          sleep(delay)\n            // Pause if the document is not visible or when the device is offline\n            .then(() => {\n              if (!focusManager.isFocused() || !onlineManager.isOnline()) {\n                return pause()\n              }\n            })\n            .then(() => {\n              if (cancelRetry) {\n                reject(error)\n              } else {\n                run()\n              }\n            })\n        })\n    }\n\n    // Start loop\n    run()\n  }\n}\n","import { scheduleMicrotask } from './utils'\n\n// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\n// CLASS\n\nclass NotifyManager {\n  private queue: NotifyCallback[]\n  private transactions: number\n  private notifyFn: NotifyFunction\n  private batchNotifyFn: BatchNotifyFunction\n\n  constructor() {\n    this.queue = []\n    this.transactions = 0\n\n    this.notifyFn = (callback: () => void) => {\n      callback()\n    }\n\n    this.batchNotifyFn = (callback: () => void) => {\n      callback()\n    }\n  }\n\n  batch<T>(callback: () => T): T {\n    this.transactions++\n    const result = callback()\n    this.transactions--\n    if (!this.transactions) {\n      this.flush()\n    }\n    return result\n  }\n\n  schedule(callback: NotifyCallback): void {\n    if (this.transactions) {\n      this.queue.push(callback)\n    } else {\n      scheduleMicrotask(() => {\n        this.notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  batchCalls<T extends Function>(callback: T): T {\n    return ((...args: any[]) => {\n      this.schedule(() => {\n        callback(...args)\n      })\n    }) as any\n  }\n\n  flush(): void {\n    const queue = this.queue\n    this.queue = []\n    if (queue.length) {\n      scheduleMicrotask(() => {\n        this.batchNotifyFn(() => {\n          queue.forEach(callback => {\n            this.notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  setNotifyFunction(fn: NotifyFunction) {\n    this.notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  setBatchNotifyFunction(fn: BatchNotifyFunction) {\n    this.batchNotifyFn = fn\n  }\n}\n\n// SINGLETON\n\nexport const notifyManager = new NotifyManager()\n","import { noop } from './utils'\n\n// TYPES\n\nexport interface Logger {\n  log: LogFunction\n  warn: LogFunction\n  error: LogFunction\n}\n\ntype LogFunction = (...args: any[]) => void\n\n// FUNCTIONS\n\nlet logger: Logger = console || {\n  error: noop,\n  warn: noop,\n  log: noop,\n}\n\nexport function getLogger(): Logger {\n  return logger\n}\n\nexport function setLogger(newLogger: Logger) {\n  logger = newLogger\n}\n","import {\n  Updater,\n  functionalUpdate,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  timeUntilStale,\n  ensureQueryKeyArray,\n} from './utils'\nimport type {\n  InitialDataFunction,\n  QueryKey,\n  QueryOptions,\n  QueryStatus,\n  QueryFunctionContext,\n  EnsuredQueryKey,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport { notifyManager } from './notifyManager'\nimport { getLogger } from './logger'\nimport { Retryer, CancelOptions, isCancelledError } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  cache: QueryCache\n  queryKey: TQueryKey\n  queryHash: string\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = unknown> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchMeta: any\n  isFetching: boolean\n  isInvalidated: boolean\n  isPaused: boolean\n  status: QueryStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  queryKey: EnsuredQueryKey<TQueryKey>\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>\n  ) => void\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: any\n}\n\nexport interface SetDataOptions {\n  updatedAt?: number\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: any\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: QueryState<TData, TError>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  initialState: QueryState<TData, TError>\n  revertState?: QueryState<TData, TError>\n  state: QueryState<TData, TError>\n  cacheTime!: number\n\n  private cache: QueryCache\n  private promise?: Promise<TData>\n  private gcTimeout?: number\n  private retryer?: Retryer<TData, TError>\n  private observers: QueryObserver<any, any, any, any, any>[]\n  private defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    this.defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.cache = config.cache\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.initialState = config.state || this.getDefaultState(this.options)\n    this.state = this.initialState\n    this.scheduleGc()\n  }\n\n  private setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    // Default to 5 minutes if not cache time is set\n    this.cacheTime = Math.max(\n      this.cacheTime || 0,\n      this.options.cacheTime ?? 5 * 60 * 1000\n    )\n  }\n\n  setDefaultOptions(\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): void {\n    this.defaultOptions = options\n  }\n\n  private scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.cacheTime)\n    }\n  }\n\n  private clearGcTimeout() {\n    clearTimeout(this.gcTimeout)\n    this.gcTimeout = undefined\n  }\n\n  private optionalRemove() {\n    if (!this.observers.length && !this.state.isFetching) {\n      this.cache.remove(this)\n    }\n  }\n\n  setData(\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): TData {\n    const prevData = this.state.data\n\n    // Get the new data\n    let data = functionalUpdate(updater, prevData)\n\n    // Use prev data if an isDataEqual function is defined and returns `true`\n    if (this.options.isDataEqual?.(prevData, data)) {\n      data = prevData as TData\n    } else if (this.options.structuralSharing !== false) {\n      // Structurally share data between prev and new data if needed\n      data = replaceEqualDeep(prevData, data)\n    }\n\n    // Set data and mark it as cached\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n    })\n\n    return data\n  }\n\n  setState(\n    state: QueryState<TData, TError>,\n    setStateOptions?: SetStateOptions\n  ): void {\n    this.dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.promise\n    this.retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    this.clearGcTimeout()\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some(observer => observer.options.enabled !== false)\n  }\n\n  isFetching(): boolean {\n    return this.state.isFetching\n  }\n\n  isStale(): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      this.observers.some(observer => observer.getCurrentResult().isStale)\n    )\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find(x => x.shouldFetchOnWindowFocus())\n\n    if (observer) {\n      observer.refetch()\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find(x => x.shouldFetchOnReconnect())\n\n    if (observer) {\n      observer.refetch()\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(x => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.retryer.isTransportCancelable) {\n            this.retryer.cancel({ revert: true })\n          } else {\n            this.retryer.cancelRetry()\n          }\n        }\n\n        if (this.cacheTime) {\n          this.scheduleGc()\n        } else {\n          this.cache.remove(this)\n        }\n      }\n\n      this.cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions\n  ): Promise<TData> {\n    if (this.state.isFetching) {\n      if (this.state.dataUpdatedAt && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({ silent: true })\n      } else if (this.promise) {\n        // Return current promise if we are already fetching\n        return this.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    const queryKey = ensureQueryKeyArray(this.queryKey)\n\n    // Create query function context\n    const queryFnContext: QueryFunctionContext<TQueryKey> = {\n      queryKey,\n      pageParam: undefined,\n    }\n\n    // Create fetch function\n    const fetchFn = () =>\n      this.options.queryFn\n        ? this.options.queryFn(queryFnContext)\n        : Promise.reject('Missing queryFn')\n\n    // Trigger behavior hook\n    const context: FetchContext<TQueryFnData, TError, TData, TQueryKey> = {\n      fetchOptions,\n      options: this.options,\n      queryKey: queryKey,\n      state: this.state,\n      fetchFn,\n    }\n\n    if (this.options.behavior?.onFetch) {\n      this.options.behavior?.onFetch(context)\n    }\n\n    // Store state in case the current fetch needs to be reverted\n    this.revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      !this.state.isFetching ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    // Try to fetch the data\n    this.retryer = new Retryer({\n      fn: context.fetchFn as () => TData,\n      onSuccess: data => {\n        this.setData(data as TData)\n\n        // Remove query after fetching if cache time is 0\n        if (this.cacheTime === 0) {\n          this.optionalRemove()\n        }\n      },\n      onError: (error: TError | { silent?: boolean }) => {\n        // Optimistically update state if needed\n        if (!(isCancelledError(error) && error.silent)) {\n          this.dispatch({\n            type: 'error',\n            error: error as TError,\n          })\n        }\n\n        if (!isCancelledError(error)) {\n          // Notify cache callback\n          if (this.cache.config.onError) {\n            this.cache.config.onError(error, this as Query<any, any, any, any>)\n          }\n\n          // Log error\n          getLogger().error(error)\n        }\n\n        // Remove query after fetching if cache time is 0\n        if (this.cacheTime === 0) {\n          this.optionalRemove()\n        }\n      },\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n    })\n\n    this.promise = this.retryer.promise\n\n    return this.promise\n  }\n\n  private dispatch(action: Action<TData, TError>): void {\n    this.state = this.reducer(this.state, action)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onQueryUpdate(action)\n      })\n\n      this.cache.notify({ query: this, type: 'queryUpdated', action })\n    })\n  }\n\n  protected getDefaultState(\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): QueryState<TData, TError> {\n    const data =\n      typeof options.initialData === 'function'\n        ? (options.initialData as InitialDataFunction<TData>)()\n        : options.initialData\n\n    const hasInitialData = typeof options.initialData !== 'undefined'\n\n    const initialDataUpdatedAt = hasInitialData\n      ? typeof options.initialDataUpdatedAt === 'function'\n        ? (options.initialDataUpdatedAt as () => number | undefined)()\n        : options.initialDataUpdatedAt\n      : 0\n\n    const hasData = typeof data !== 'undefined'\n\n    return {\n      data,\n      dataUpdateCount: 0,\n      dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n      error: null,\n      errorUpdateCount: 0,\n      errorUpdatedAt: 0,\n      fetchFailureCount: 0,\n      fetchMeta: null,\n      isFetching: false,\n      isInvalidated: false,\n      isPaused: false,\n      status: hasData ? 'success' : 'idle',\n    }\n  }\n\n  protected reducer(\n    state: QueryState<TData, TError>,\n    action: Action<TData, TError>\n  ): QueryState<TData, TError> {\n    switch (action.type) {\n      case 'failed':\n        return {\n          ...state,\n          fetchFailureCount: state.fetchFailureCount + 1,\n        }\n      case 'pause':\n        return {\n          ...state,\n          isPaused: true,\n        }\n      case 'continue':\n        return {\n          ...state,\n          isPaused: false,\n        }\n      case 'fetch':\n        return {\n          ...state,\n          fetchFailureCount: 0,\n          fetchMeta: action.meta ?? null,\n          isFetching: true,\n          isPaused: false,\n          status: !state.dataUpdatedAt ? 'loading' : state.status,\n        }\n      case 'success':\n        return {\n          ...state,\n          data: action.data,\n          dataUpdateCount: state.dataUpdateCount + 1,\n          dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n          error: null,\n          fetchFailureCount: 0,\n          isFetching: false,\n          isInvalidated: false,\n          isPaused: false,\n          status: 'success',\n        }\n      case 'error':\n        const error = action.error as unknown\n\n        if (isCancelledError(error) && error.revert && this.revertState) {\n          return { ...this.revertState }\n        }\n\n        return {\n          ...state,\n          error: error as TError,\n          errorUpdateCount: state.errorUpdateCount + 1,\n          errorUpdatedAt: Date.now(),\n          fetchFailureCount: state.fetchFailureCount + 1,\n          isFetching: false,\n          isPaused: false,\n          status: 'error',\n        }\n      case 'invalidate':\n        return {\n          ...state,\n          isInvalidated: true,\n        }\n      case 'setState':\n        return {\n          ...state,\n          ...action.state,\n        }\n      default:\n        return state\n    }\n  }\n}\n","import {\n  QueryFilters,\n  hashQueryKeyByOptions,\n  matchQuery,\n  parseFilterArgs,\n} from './utils'\nimport { Action, Query, QueryState } from './query'\nimport type { QueryKey, QueryOptions } from './types'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport { QueryObserver } from './queryObserver'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (error: unknown, query: Query<unknown, unknown, unknown>) => void\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryAdded {\n  type: 'queryAdded'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryRemoved {\n  type: 'queryRemoved'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryUpdated {\n  type: 'queryUpdated'\n  query: Query<any, any, any, any>\n  action: Action<any, any>\n}\n\ninterface NotifyEventObserverAdded {\n  type: 'observerAdded'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventObserverRemoved {\n  type: 'observerRemoved'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventObserverResultsUpdated {\n  type: 'observerResultsUpdated'\n  query: Query<any, any, any, any>\n}\n\ntype QueryCacheNotifyEvent =\n  | NotifyEventQueryAdded\n  | NotifyEventQueryRemoved\n  | NotifyEventQueryUpdated\n  | NotifyEventObserverAdded\n  | NotifyEventObserverRemoved\n  | NotifyEventObserverResultsUpdated\n\ntype QueryCacheListener = (event?: QueryCacheNotifyEvent) => void\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  config: QueryCacheConfig\n\n  private queries: Query<any, any, any, any>[]\n  private queriesMap: QueryHashMap\n\n  constructor(config?: QueryCacheConfig) {\n    super()\n    this.config = config || {}\n    this.queries = []\n    this.queriesMap = {}\n  }\n\n  build<TQueryFnData, TError, TData, TQueryKey extends QueryKey>(\n    client: QueryClient,\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    state?: QueryState<TData, TError>\n  ): Query<TQueryFnData, TError, TData, TQueryKey> {\n    const queryKey = options.queryKey!\n    const queryHash =\n      options.queryHash ?? hashQueryKeyByOptions(queryKey, options)\n    let query = this.get<TQueryFnData, TError, TData, TQueryKey>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any, any, any>): void {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query\n      this.queries.push(query)\n      this.notify({\n        type: 'queryAdded',\n        query,\n      })\n    }\n  }\n\n  remove(query: Query<any, any, any, any>): void {\n    const queryInMap = this.queriesMap[query.queryHash]\n\n    if (queryInMap) {\n      query.destroy()\n\n      this.queries = this.queries.filter(x => x !== query)\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash]\n      }\n\n      this.notify({ type: 'queryRemoved', query })\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueyKey extends QueryKey = QueryKey\n  >(\n    queryHash: string\n  ): Query<TQueryFnData, TError, TData, TQueyKey> | undefined {\n    return this.queriesMap[queryHash]\n  }\n\n  getAll(): Query[] {\n    return this.queries\n  }\n\n  find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    arg1: QueryKey,\n    arg2?: QueryFilters\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const [filters] = parseFilterArgs(arg1, arg2)\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.queries.find(query => matchQuery(filters, query))\n  }\n\n  findAll(queryKey?: QueryKey, filters?: QueryFilters): Query[]\n  findAll(filters?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[] {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    return filters\n      ? this.queries.filter(query => matchQuery(filters, query))\n      : this.queries\n  }\n\n  notify(event: QueryCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline()\n      })\n    })\n  }\n}\n","import type { MutationOptions, MutationStatus } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport { getLogger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Retryer } from './retryer'\nimport { noop } from './utils'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private mutationCache: MutationCache\n  private retryer?: Retryer<TData, TError>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    this.options = {\n      ...config.defaultOptions,\n      ...config.options,\n    }\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.observers = []\n    this.state = config.state || getDefaultState()\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter(x => x !== observer)\n  }\n\n  cancel(): Promise<void> {\n    if (this.retryer) {\n      this.retryer.cancel()\n      return this.retryer.promise.then(noop).catch(noop)\n    }\n    return Promise.resolve()\n  }\n\n  continue(): Promise<TData> {\n    if (this.retryer) {\n      this.retryer.continue()\n      return this.retryer.promise\n    }\n    return this.execute()\n  }\n\n  execute(): Promise<TData> {\n    let data: TData\n\n    const restored = this.state.status === 'loading'\n\n    let promise = Promise.resolve()\n\n    if (!restored) {\n      this.dispatch({ type: 'loading', variables: this.options.variables! })\n      promise = promise\n        .then(() => this.options.onMutate?.(this.state.variables!))\n        .then(context => {\n          if (context !== this.state.context) {\n            this.dispatch({\n              type: 'loading',\n              context,\n              variables: this.state.variables,\n            })\n          }\n        })\n    }\n\n    return promise\n      .then(() => this.executeMutation())\n      .then(result => {\n        data = result\n      })\n      .then(() =>\n        this.options.onSuccess?.(\n          data,\n          this.state.variables!,\n          this.state.context!\n        )\n      )\n      .then(() =>\n        this.options.onSettled?.(\n          data,\n          null,\n          this.state.variables!,\n          this.state.context\n        )\n      )\n      .then(() => {\n        this.dispatch({ type: 'success', data })\n        return data\n      })\n      .catch(error => {\n        // Notify cache callback\n        if (this.mutationCache.config.onError) {\n          this.mutationCache.config.onError(\n            error,\n            this.state.variables,\n            this.state.context,\n            this as Mutation<unknown, unknown, unknown, unknown>\n          )\n        }\n\n        // Log error\n        getLogger().error(error)\n\n        return Promise.resolve()\n          .then(() =>\n            this.options.onError?.(\n              error,\n              this.state.variables!,\n              this.state.context\n            )\n          )\n          .then(() =>\n            this.options.onSettled?.(\n              undefined,\n              error,\n              this.state.variables!,\n              this.state.context\n            )\n          )\n          .then(() => {\n            this.dispatch({ type: 'error', error })\n            throw error\n          })\n      })\n  }\n\n  private executeMutation(): Promise<TData> {\n    this.retryer = new Retryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject('No mutationFn found')\n        }\n        return this.options.mutationFn(this.state.variables!)\n      },\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: this.options.retry ?? 0,\n      retryDelay: this.options.retryDelay,\n    })\n\n    return this.retryer.promise\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    this.state = reducer(this.state, action)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action)\n      })\n      this.mutationCache.notify(this)\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n\nfunction reducer<TData, TError, TVariables, TContext>(\n  state: MutationState<TData, TError, TVariables, TContext>,\n  action: Action<TData, TError, TVariables, TContext>\n): MutationState<TData, TError, TVariables, TContext> {\n  switch (action.type) {\n    case 'failed':\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case 'pause':\n      return {\n        ...state,\n        isPaused: true,\n      }\n    case 'continue':\n      return {\n        ...state,\n        isPaused: false,\n      }\n    case 'loading':\n      return {\n        ...state,\n        context: action.context,\n        data: undefined,\n        error: null,\n        isPaused: false,\n        status: 'loading',\n        variables: action.variables,\n      }\n    case 'success':\n      return {\n        ...state,\n        data: action.data,\n        error: null,\n        status: 'success',\n        isPaused: false,\n      }\n    case 'error':\n      return {\n        ...state,\n        data: undefined,\n        error: action.error,\n        failureCount: state.failureCount + 1,\n        isPaused: false,\n        status: 'error',\n      }\n    case 'setState':\n      return {\n        ...state,\n        ...action.state,\n      }\n    default:\n      return state\n  }\n}\n","import type { MutationOptions } from './types'\nimport type { QueryClient } from './queryClient'\nimport { notifyManager } from './notifyManager'\nimport { Mutation, MutationState } from './mutation'\nimport { matchMutation, MutationFilters, noop } from './utils'\nimport { Subscribable } from './subscribable'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown, unknown>\n  ) => void\n}\n\ntype MutationCacheListener = (mutation?: Mutation) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  config: MutationCacheConfig\n\n  private mutations: Mutation<any, any, any, any>[]\n  private mutationId: number\n\n  constructor(config?: MutationCacheConfig) {\n    super()\n    this.config = config || {}\n    this.mutations = []\n    this.mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey\n        ? client.getMutationDefaults(options.mutationKey)\n        : undefined,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.mutations.push(mutation)\n    this.notify(mutation)\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    this.mutations = this.mutations.filter(x => x !== mutation)\n    mutation.cancel()\n    this.notify(mutation)\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.mutations.forEach(mutation => {\n        this.remove(mutation)\n      })\n    })\n  }\n\n  getAll(): Mutation[] {\n    return this.mutations\n  }\n\n  find<TData = unknown, TError = unknown, TVariables = any, TContext = unknown>(\n    filters: MutationFilters\n  ): Mutation<TData, TError, TVariables, TContext> | undefined {\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.mutations.find(mutation => matchMutation(filters, mutation))\n  }\n\n  findAll(filters: MutationFilters): Mutation[] {\n    return this.mutations.filter(mutation => matchMutation(filters, mutation))\n  }\n\n  notify(mutation?: Mutation<any, any, any, any>) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(mutation)\n      })\n    })\n  }\n\n  onFocus(): void {\n    this.resumePausedMutations()\n  }\n\n  onOnline(): void {\n    this.resumePausedMutations()\n  }\n\n  resumePausedMutations(): Promise<void> {\n    const pausedMutations = this.mutations.filter(x => x.state.isPaused)\n    return notifyManager.batch(() =>\n      pausedMutations.reduce(\n        (promise, mutation) =>\n          promise.then(() => mutation.continue().catch(noop)),\n        Promise.resolve()\n      )\n    )\n  }\n}\n","import type { QueryBehavior } from './query'\nimport { isCancelable } from './retryer'\nimport type { InfiniteData, QueryFunctionContext, QueryOptions } from './types'\n\nexport function infiniteQueryBehavior<\n  TQueryFnData,\n  TError,\n  TData\n>(): QueryBehavior<TQueryFnData, TError, InfiniteData<TData>> {\n  return {\n    onFetch: context => {\n      context.fetchFn = () => {\n        const fetchMore = context.fetchOptions?.meta?.fetchMore\n        const pageParam = fetchMore?.pageParam\n        const isFetchingNextPage = fetchMore?.direction === 'forward'\n        const isFetchingPreviousPage = fetchMore?.direction === 'backward'\n        const oldPages = context.state.data?.pages || []\n        const oldPageParams = context.state.data?.pageParams || []\n        let newPageParams = oldPageParams\n        let cancelled = false\n\n        // Get query function\n        const queryFn =\n          context.options.queryFn || (() => Promise.reject('Missing queryFn'))\n\n        // Create function to fetch a page\n        const fetchPage = (\n          pages: unknown[],\n          manual?: boolean,\n          param?: unknown,\n          previous?: boolean\n        ): Promise<unknown[]> => {\n          if (cancelled) {\n            return Promise.reject('Cancelled')\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages)\n          }\n\n          const queryFnContext: QueryFunctionContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n          }\n\n          const queryFnResult = queryFn(queryFnContext)\n\n          const promise = Promise.resolve(queryFnResult).then(page => {\n            newPageParams = previous\n              ? [param, ...newPageParams]\n              : [...newPageParams, param]\n            return previous ? [page, ...pages] : [...pages, page]\n          })\n\n          if (isCancelable(queryFnResult)) {\n            const promiseAsAny = promise as any\n            promiseAsAny.cancel = queryFnResult.cancel\n          }\n\n          return promise\n        }\n\n        let promise: Promise<unknown[]>\n\n        // Fetch first page?\n        if (!oldPages.length) {\n          promise = fetchPage([])\n        }\n\n        // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getNextPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param)\n        }\n\n        // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getPreviousPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param, true)\n        }\n\n        // Refetch pages\n        else {\n          newPageParams = []\n\n          const manual = typeof context.options.getNextPageParam === 'undefined'\n\n          // Fetch first page\n          promise = fetchPage([], manual, oldPageParams[0])\n\n          // Fetch remaining pages\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then(pages => {\n              const param = manual\n                ? oldPageParams[i]\n                : getNextPageParam(context.options, pages)\n              return fetchPage(pages, manual, param)\n            })\n          }\n        }\n\n        const finalPromise = promise.then(pages => ({\n          pages,\n          pageParams: newPageParams,\n        }))\n\n        const finalPromiseAsAny = finalPromise as any\n\n        finalPromiseAsAny.cancel = () => {\n          cancelled = true\n          if (isCancelable(promise)) {\n            promise.cancel()\n          }\n        }\n\n        return finalPromise\n      }\n    },\n  }\n}\n\nexport function getNextPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getNextPageParam?.(pages[pages.length - 1], pages)\n}\n\nexport function getPreviousPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getPreviousPageParam?.(pages[0], pages)\n}\n\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasNextPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages)\n    return (\n      typeof nextPageParam !== 'undefined' &&\n      nextPageParam !== null &&\n      nextPageParam !== false\n    )\n  }\n}\n\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasPreviousPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages)\n    return (\n      typeof previousPageParam !== 'undefined' &&\n      previousPageParam !== null &&\n      previousPageParam !== false\n    )\n  }\n}\n","import {\n  QueryFilters,\n  Updater,\n  hashQueryKey,\n  noop,\n  parseFilterArgs,\n  parseQueryArgs,\n  partialMatchKey,\n  hashQueryKeyByOptions,\n  MutationFilters,\n} from './utils'\nimport type {\n  DefaultOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  ResetOptions,\n} from './types'\nimport type { QueryState, SetDataOptions } from './query'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { CancelOptions } from './retryer'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\n\n// TYPES\n\ninterface QueryClientConfig {\n  queryCache?: QueryCache\n  mutationCache?: MutationCache\n  defaultOptions?: DefaultOptions\n}\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  private queryCache: QueryCache\n  private mutationCache: MutationCache\n  private defaultOptions: DefaultOptions\n  private queryDefaults: QueryDefaults[]\n  private mutationDefaults: MutationDefaults[]\n  private unsubscribeFocus?: () => void\n  private unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.queryCache = config.queryCache || new QueryCache()\n    this.mutationCache = config.mutationCache || new MutationCache()\n    this.defaultOptions = config.defaultOptions || {}\n    this.queryDefaults = []\n    this.mutationDefaults = []\n  }\n\n  mount(): void {\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused() && onlineManager.isOnline()) {\n        this.mutationCache.onFocus()\n        this.queryCache.onFocus()\n      }\n    })\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (focusManager.isFocused() && onlineManager.isOnline()) {\n        this.mutationCache.onOnline()\n        this.queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.unsubscribeFocus?.()\n    this.unsubscribeOnline?.()\n  }\n\n  isFetching(filters?: QueryFilters): number\n  isFetching(queryKey?: QueryKey, filters?: QueryFilters): number\n  isFetching(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): number {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    filters.fetching = true\n    return this.queryCache.findAll(filters).length\n  }\n\n  isMutating(filters?: MutationFilters): number {\n    return this.mutationCache.findAll({ ...filters, fetching: true }).length\n  }\n\n  getQueryData<TData = unknown>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): TData | undefined {\n    return this.queryCache.find<TData>(queryKey, filters)?.state.data\n  }\n\n  setQueryData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): TData {\n    const parsedOptions = parseQueryArgs(queryKey)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n    return this.queryCache\n      .build(this, defaultedOptions)\n      .setData(updater, options)\n  }\n\n  setQueriesData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): [QueryKey, TData][]\n\n  setQueriesData<TData>(\n    filters: QueryFilters,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): [QueryKey, TData][]\n\n  setQueriesData<TData>(\n    queryKeyOrFilters: QueryKey | QueryFilters,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): [QueryKey, TData][] {\n    return notifyManager.batch(() =>\n      this.getQueryCache()\n        .findAll(queryKeyOrFilters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TData>(queryKey, updater, options),\n        ])\n    )\n  }\n\n  getQueryState<TData = unknown, TError = undefined>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): QueryState<TData, TError> | undefined {\n    return this.queryCache.find<TData, TError>(queryKey, filters)?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void\n  removeQueries(queryKey?: QueryKey, filters?: QueryFilters): void\n  removeQueries(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): void {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    const queryCache = this.queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries(filters?: QueryFilters, options?: ResetOptions): Promise<void>\n  resetQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: ResetOptions\n  ): Promise<void>\n  resetQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | ResetOptions,\n    arg3?: ResetOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n    const queryCache = this.queryCache\n\n    const refetchFilters: QueryFilters = {\n      ...filters,\n      active: true,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(filters?: QueryFilters, options?: CancelOptions): Promise<void>\n  cancelQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: CancelOptions\n  ): Promise<void>\n  cancelQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | CancelOptions,\n    arg3?: CancelOptions\n  ): Promise<void> {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3)\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true\n    }\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions))\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries(\n    filters?: InvalidateQueryFilters,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries(\n    queryKey?: QueryKey,\n    filters?: InvalidateQueryFilters,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries(\n    arg1?: QueryKey | InvalidateQueryFilters,\n    arg2?: InvalidateQueryFilters | InvalidateOptions,\n    arg3?: InvalidateOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const refetchFilters: QueryFilters = {\n      ...filters,\n      active: filters.refetchActive ?? true,\n      inactive: filters.refetchInactive,\n    }\n\n    return notifyManager.batch(() => {\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries(\n    filters?: QueryFilters,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | RefetchOptions,\n    arg3?: RefetchOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache.findAll(filters).map(query => query.fetch())\n    )\n\n    let promise = Promise.all(promises).then(noop)\n\n    if (!options?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void> {\n    return this.fetchQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    parsedOptions.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData\n    >()\n    return this.fetchQuery(parsedOptions)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  cancelMutations(): Promise<void> {\n    const promises = notifyManager.batch(() =>\n      this.mutationCache.getAll().map(mutation => mutation.cancel())\n    )\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  resumePausedMutations(): Promise<void> {\n    return this.getMutationCache().resumePausedMutations()\n  }\n\n  executeMutation<\n    TData = unknown,\n    TError = unknown,\n    TVariables = void,\n    TContext = unknown\n  >(\n    options: MutationOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    return this.mutationCache.build(this, options).execute()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.mutationCache\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: QueryObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.queryDefaults.find(\n      x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.queryDefaults.push({ queryKey, defaultOptions: options })\n    }\n  }\n\n  getQueryDefaults(\n    queryKey?: QueryKey\n  ): QueryObserverOptions<any, any, any, any, any> | undefined {\n    return queryKey\n      ? this.queryDefaults.find(x => partialMatchKey(queryKey, x.queryKey))\n          ?.defaultOptions\n      : undefined\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: MutationObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.mutationDefaults.find(\n      x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.mutationDefaults.push({ mutationKey, defaultOptions: options })\n    }\n  }\n\n  getMutationDefaults(\n    mutationKey?: MutationKey\n  ): MutationObserverOptions<any, any, any, any> | undefined {\n    return mutationKey\n      ? this.mutationDefaults.find(x =>\n          partialMatchKey(mutationKey, x.mutationKey)\n        )?.defaultOptions\n      : undefined\n  }\n\n  defaultQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey extends QueryKey\n  >(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey> {\n    if (options?._defaulted) {\n      return options\n    }\n\n    const defaultedOptions = {\n      ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options?.queryKey),\n      ...options,\n      _defaulted: true,\n    } as QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions\n      )\n    }\n\n    return defaultedOptions\n  }\n\n  defaultQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey extends QueryKey\n  >(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey> {\n    return this.defaultQueryOptions(options)\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options?.mutationKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.queryCache.clear()\n    this.mutationCache.clear()\n  }\n}\n","import {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n  ResultOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { getLogger } from './logger'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private previousSelectError: Error | null\n  private staleTimeoutId?: number\n  private refetchIntervalId?: number\n  private trackedProps!: Array<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = []\n    this.previousSelectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOnReconnect(this.currentQuery, this.options)\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOnWindowFocus(this.currentQuery, this.options)\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.clearTimers()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryObserverOptions(options)\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.refetchInterval !== prevOptions.refetchInterval)\n    ) {\n      this.updateRefetchInterval()\n    }\n  }\n\n  getOptimisticResult(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverResult<TData, TError> {\n    const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        defaultedOptions as QueryOptions<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >\n      )\n\n    return this.createResult(query, defaultedOptions)\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          const typedKey = key as keyof QueryObserverResult\n          if (!this.trackedProps.includes(typedKey)) {\n            this.trackedProps.push(typedKey)\n          }\n          return result[typedKey]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getNextResult(\n    options?: ResultOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return new Promise((resolve, reject) => {\n      const unsubscribe = this.subscribe(result => {\n        if (!result.isFetching) {\n          unsubscribe()\n          if (result.isError && options?.throwOnError) {\n            reject(result.error)\n          } else {\n            resolve(result)\n          }\n        }\n      })\n    })\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch(\n    options?: RefetchOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.fetch(options)\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        defaultedOptions as QueryOptions<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >\n      )\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch(fetchOptions).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private updateRefetchInterval(): void {\n    this.clearRefetchInterval()\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.options.refetchInterval)\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.options.refetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval()\n  }\n\n  private clearTimers(): void {\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n  }\n\n  private clearStaleTimeout(): void {\n    clearTimeout(this.staleTimeoutId)\n    this.staleTimeoutId = undefined\n  }\n\n  private clearRefetchInterval(): void {\n    clearInterval(this.refetchIntervalId)\n    this.refetchIntervalId = undefined\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, isFetching, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options.optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        isFetching = true\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdateCount &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === prevResultOptions?.select &&\n        !this.previousSelectError\n      ) {\n        data = prevResult.data\n      } else {\n        try {\n          data = options.select(state.data)\n          if (options.structuralSharing !== false) {\n            data = replaceEqualDeep(prevResult?.data, data)\n          }\n          this.previousSelectError = null\n        } catch (selectError) {\n          getLogger().error(selectError)\n          error = selectError\n          this.previousSelectError = selectError\n          errorUpdatedAt = Date.now()\n          status = 'error'\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = (state.data as unknown) as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            if (options.structuralSharing !== false) {\n              placeholderData = replaceEqualDeep(\n                prevResult?.data,\n                placeholderData\n              )\n            }\n            this.previousSelectError = null\n          } catch (selectError) {\n            getLogger().error(selectError)\n            error = selectError\n            this.previousSelectError = selectError\n            errorUpdatedAt = Date.now()\n            status = 'error'\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = placeholderData as TData\n        isPlaceholderData = true\n      }\n    }\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      isIdle: status === 'idle',\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  private shouldNotifyListeners(\n    result: QueryObserverResult,\n    prevResult?: QueryObserverResult\n  ): boolean {\n    if (!prevResult) {\n      return true\n    }\n\n    if (result === prevResult) {\n      return false\n    }\n\n    const { notifyOnChangeProps, notifyOnChangePropsExclusions } = this.options\n\n    if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {\n      return true\n    }\n\n    if (notifyOnChangeProps === 'tracked' && !this.trackedProps.length) {\n      return true\n    }\n\n    const includedProps =\n      notifyOnChangeProps === 'tracked'\n        ? this.trackedProps\n        : notifyOnChangeProps\n\n    return Object.keys(result).some(key => {\n      const typedKey = key as keyof QueryObserverResult\n      const changed = result[typedKey] !== prevResult[typedKey]\n      const isIncluded = includedProps?.some(x => x === key)\n      const isExcluded = notifyOnChangePropsExclusions?.some(x => x === key)\n      return changed && !isExcluded && (!includedProps || isIncluded)\n    })\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    this.currentResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify if something has changed\n    if (shallowEqualObjects(this.currentResult, prevResult)) {\n      return\n    }\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    if (\n      notifyOptions?.listeners !== false &&\n      this.shouldNotifyListeners(this.currentResult, prevResult)\n    ) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        this.options as QueryOptions<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >\n      )\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client\n          .getQueryCache()\n          .notify({ query: this.currentQuery, type: 'observerResultsUpdated' })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldRefetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    query.state.dataUpdatedAt > 0 &&\n    (options.refetchOnMount === 'always' ||\n      (options.refetchOnMount !== false && isStale(query, options)))\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) || shouldRefetchOnMount(query, options)\n  )\n}\n\nfunction shouldFetchOnReconnect(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    (options.refetchOnReconnect === 'always' ||\n      (options.refetchOnReconnect !== false && isStale(query, options)))\n  )\n}\n\nfunction shouldFetchOnWindowFocus(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    (options.refetchOnWindowFocus === 'always' ||\n      (options.refetchOnWindowFocus !== false && isStale(query, options)))\n  )\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n","import { difference, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport type { QueryObserverOptions, QueryObserverResult } from './types'\nimport type { QueryClient } from './queryClient'\nimport { NotifyOptions, QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n  private observersMap: Record<string, QueryObserver>\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = []\n    this.result = []\n    this.observers = []\n    this.observersMap = {}\n\n    if (queries) {\n      this.setQueries(queries)\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.observers.forEach(observer => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: QueryObserverOptions[],\n    notifyOptions?: NotifyOptions\n  ): void {\n    this.queries = queries\n    this.updateObservers(notifyOptions)\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  getOptimisticResult(queries: QueryObserverOptions[]): QueryObserverResult[] {\n    return queries.map(options => {\n      const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n      return this.getObserver(defaultedOptions).getOptimisticResult(\n        defaultedOptions\n      )\n    })\n  }\n\n  private getObserver(options: QueryObserverOptions): QueryObserver {\n    const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n    return (\n      this.observersMap[defaultedOptions.queryHash!] ||\n      new QueryObserver(this.client, defaultedOptions)\n    )\n  }\n\n  private updateObservers(notifyOptions?: NotifyOptions): void {\n    notifyManager.batch(() => {\n      let hasIndexChange = false\n\n      const prevObservers = this.observers\n      const prevOberversMap = this.observersMap\n\n      const newResult: QueryObserverResult[] = []\n      const newObservers: QueryObserver[] = []\n      const newObserversMap: Record<string, QueryObserver> = {}\n\n      this.queries.forEach((options, i) => {\n        const defaultedOptions = this.client.defaultQueryObserverOptions(\n          options\n        )\n        const queryHash = defaultedOptions.queryHash!\n        const observer = this.getObserver(defaultedOptions)\n\n        if (prevOberversMap[queryHash]) {\n          observer.setOptions(defaultedOptions, notifyOptions)\n        }\n\n        if (observer !== prevObservers[i]) {\n          hasIndexChange = true\n        }\n\n        newObservers.push(observer)\n        newResult.push(observer.getCurrentResult())\n        newObserversMap[queryHash] = observer\n      })\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.observers = newObservers\n      this.observersMap = newObserversMap\n      this.result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n\n      this.notify()\n    })\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(this.result)\n      })\n    })\n  }\n}\n","import type {\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport { ObserverFetchOptions, QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  InfiniteData<TData>,\n  InfiniteData<TQueryData>\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions?: ObserverFetchOptions\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): void {\n    super.setOptions({\n      ...options,\n      behavior: infiniteQueryBehavior(),\n    })\n  }\n\n  getOptimisticResult(\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage(\n    options?: FetchNextPageOptions\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      cancelRefetch: true,\n      throwOnError: options?.throwOnError,\n      meta: {\n        fetchMore: { direction: 'forward', pageParam: options?.pageParam },\n      },\n    })\n  }\n\n  fetchPreviousPage(\n    options?: FetchPreviousPageOptions\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      cancelRefetch: true,\n      throwOnError: options?.throwOnError,\n      meta: {\n        fetchMore: { direction: 'backward', pageParam: options?.pageParam },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, InfiniteData<TQueryData>>,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data?.pages),\n      hasPreviousPage: hasPreviousPage(options, state.data?.pages),\n      isFetchingNextPage:\n        state.isFetching && state.fetchMeta?.fetchMore?.direction === 'forward',\n      isFetchingPreviousPage:\n        state.isFetching &&\n        state.fetchMeta?.fetchMore?.direction === 'backward',\n    }\n  }\n}\n","import { Action, getDefaultState, Mutation } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    this.options = this.client.defaultMutationOptions(options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.currentResult = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n"],"names":["_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","__proto__","Subscribable","listeners","subscribe","listener","callback","push","onSubscribe","_this","filter","x","onUnsubscribe","hasListeners","this","length","_extends","assign","target","i","arguments","source","key","hasOwnProperty","call","apply","isServer","window","noop","isValidTimeout","value","Infinity","ensureQueryKeyArray","Array","isArray","difference","array1","array2","indexOf","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","parseQueryArgs","arg1","arg2","arg3","isQueryKey","queryKey","queryFn","parseFilterArgs","matchQuery","filters","query","isActive","active","exact","fetching","inactive","predicate","stale","queryHash","hashQueryKeyByOptions","options","partialMatchKey","isStale","isFetching","matchMutation","mutation","mutationKey","hashQueryKey","state","status","queryKeyHashFn","asArray","JSON","stringify","_","val","isPlainObject","keys","sort","reduce","result","a","b","partialDeepEqual","some","replaceEqualDeep","array","aSize","bItems","bSize","copy","equalItems","o","hasObjectPrototype","ctor","prot","toString","scheduleMicrotask","Promise","resolve","then","catch","error","setTimeout","focusManager","removeEventListener","setDefaultEventListener","setEventListener","setup","focused","setFocused","onFocus","forEach","isFocused","document","undefined","includes","visibilityState","_window","addEventListener","onlineManager","online","setOnline","onOnline","isOnline","navigator","onLine","defaultRetryDelay","failureCount","min","isCancelable","cancel","CancelledError","revert","silent","isCancelledError","Retryer","config","cancelFn","continueFn","promiseResolve","promiseReject","cancelRetry","cancelOptions","continue","isPaused","isResolved","isTransportCancelable","promise","outerResolve","outerReject","onSuccess","reject","onError","run","promiseOrValue","fn","timeout","retry","retryDelay","delay","shouldRetry","onFail","continueResolve","onPause","onContinue","notifyManager","queue","transactions","notifyFn","batchNotifyFn","batch","flush","schedule","batchCalls","args","_this2","_this3","setNotifyFunction","setBatchNotifyFunction","logger","console","warn","log","getLogger","Query","defaultOptions","setOptions","observers","cache","initialState","getDefaultState","scheduleGc","cacheTime","setDefaultOptions","clearGcTimeout","gcTimeout","optionalRemove","clearTimeout","remove","setData","updater","prevData","data","input","functionalUpdate","isDataEqual","_this$options$isDataE","structuralSharing","dispatch","type","dataUpdatedAt","setState","setStateOptions","retryer","destroy","reset","observer","enabled","isInvalidated","getCurrentResult","isStaleByTime","find","shouldFetchOnWindowFocus","refetch","shouldFetchOnReconnect","addObserver","notify","removeObserver","getObserversCount","invalidate","fetch","fetchOptions","cancelRefetch","queryFnContext","pageParam","context","fetchFn","behavior","_this$options$behavio","onFetch","revertState","fetchMeta","_context$fetchOptions","meta","_context$fetchOptions2","action","reducer","onQueryUpdate","initialData","initialDataUpdatedAt","hasData","dataUpdateCount","errorUpdateCount","errorUpdatedAt","fetchFailureCount","QueryCache","queries","queriesMap","build","client","get","defaultQueryOptions","getQueryDefaults","add","queryInMap","clear","getAll","findAll","event","_this4","_this5","Mutation","mutationId","mutationCache","execute","restored","variables","onMutate","executeMutation","onSettled","mutationFn","onMutationUpdate","MutationCache","mutations","defaultMutationOptions","getMutationDefaults","resumePausedMutations","pausedMutations","infiniteQueryBehavior","fetchMore","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","pages","oldPageParams","pageParams","newPageParams","cancelled","fetchPage","manual","param","previous","queryFnResult","page","getNextPageParam","getPreviousPageParam","finalPromise","hasNextPage","nextPageParam","hasPreviousPage","previousPageParam","QueryClient","queryCache","queryDefaults","mutationDefaults","mount","unsubscribeFocus","unsubscribeOnline","unmount","isMutating","getQueryData","_this$queryCache$find","setQueryData","parsedOptions","defaultedOptions","setQueriesData","queryKeyOrFilters","getQueryCache","map","getQueryState","_this$queryCache$find2","removeQueries","resetQueries","refetchFilters","refetchQueries","cancelQueries","promises","all","invalidateQueries","refetchActive","refetchInactive","_this6","throwOnError","fetchQuery","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","cancelMutations","_this7","getMutationCache","getDefaultOptions","setQueryDefaults","_this$queryDefaults$f","setMutationDefaults","_this$mutationDefault","_defaulted","defaultQueryObserverOptions","QueryObserver","trackedProps","previousSelectError","bindMethods","bind","currentQuery","shouldFetchOnMount","executeFetch","updateTimers","refetchOnReconnect","refetchOnWindowFocus","clearTimers","notifyOptions","prevOptions","prevQuery","Error","updateQuery","mounted","shouldFetchOptionally","updateResult","updateStaleTimeout","refetchInterval","updateRefetchInterval","getOptimisticResult","createResult","currentResult","trackResult","trackedResult","defineProperty","configurable","enumerable","typedKey","getNextResult","unsubscribe","isError","getCurrentQuery","fetchOptimistic","clearStaleTimeout","staleTimeoutId","clearRefetchInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","isPreviousData","isPlaceholderData","optimisticResults","fetchOnMount","fetchOptionally","keepPreviousData","isSuccess","select","selectError","placeholderData","isLoading","isIdle","isFetched","isFetchedAfterMount","isLoadingError","isRefetchError","shouldNotifyListeners","notifyOnChangeProps","notifyOnChangePropsExclusions","includedProps","changed","isIncluded","isExcluded","shallowEqualObjects","defaultNotifyOptions","_this8","retryOnMount","shouldLoadOnMount","refetchOnMount","shouldRefetchOnMount","QueriesObserver","observersMap","setQueries","onUpdate","updateObservers","getObserver","hasIndexChange","prevObservers","prevOberversMap","newResult","newObservers","newObserversMap","index","slice","replaceAt","InfiniteQueryObserver","_QueryObserver","fetchNextPage","fetchPreviousPage","_state$data","_state$data2","MutationObserver","mutate","currentMutation","mutateOptions","newLogger"],"mappings":"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"}